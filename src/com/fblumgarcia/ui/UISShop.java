package com.fblumgarcia.ui;

import com.fblumgarcia.model.DataBase;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
 
/**
     * <h1>UILogin</h1>
     * <p> Formato visual para acceder al carrito de compra y se genera un recibo de la compra
     * @author fblumgarcia
     * https://github.com/fblumgarcia
     * 
     */
public class UISShop extends javax.swing.JPanel {
    
    UISProducts prods;UIStore store;
    /**
     * Creates new form UISShop
     */
    public UISShop() {
        initComponents();
        prods=new UISProducts();
        TableColumnModel columnModel=tableToBuy.getColumnModel();//Se inicializa el modelo de la tabla
        columnModel.getColumn(0).setPreferredWidth(5);columnModel.getColumn(1).setPreferredWidth(20);columnModel.getColumn(2).setPreferredWidth(15);
        columnModel.getColumn(3).setPreferredWidth(15);columnModel.getColumn(4).setPreferredWidth(40);      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableToBuy = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        buy = new javax.swing.JButton();

        setForeground(new java.awt.Color(255, 204, 204));

        tableToBuy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "PRECIO", "CANTIDAD", "PAGO", "ELIMINAR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableToBuy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableToBuyMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableToBuy);

        jLabel1.setText("TOTAL DE LA COMPRA ES: ");

        totalLabel.setText("jLabel2");

        buy.setText("Hacer Compra");
        buy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 710, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(totalLabel)
                        .addGap(67, 67, 67))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buy)
                        .addGap(97, 97, 97))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(totalLabel))
                        .addGap(43, 43, 43)
                        .addComponent(buy)))
                .addContainerGap(146, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void buyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyActionPerformed
        ArrayList productsToBuy=new ArrayList();   
        DataBase db=new DataBase();
        for(int i=0;i<tableToBuy.getRowCount();i++){//Recorre la tabla
            if(tableToBuy.getValueAt(i, 5).equals(true)){//Si esta seleccionado la fila
                boolean checkBuy=db.UpdateBuy(((String) tableToBuy.getValueAt(i, 0)), ((String) String.valueOf(tableToBuy.getValueAt(i, 3))));
                    if(checkBuy==false){
                        JOptionPane.showMessageDialog(null,"No se pudo realizar la compra de: "+((String) tableToBuy.getValueAt(i, 1)));
                    }else{
                        productsToBuy.add(tableToBuy.getValueAt(i, 1));//Añade el nombre
                        productsToBuy.add( tableToBuy.getValueAt(i, 3));
                        productsToBuy.add( tableToBuy.getValueAt(i, 2));
                        productsToBuy.add( tableToBuy.getValueAt(i, 4));
                    }
            }        
        }
        if(productsToBuy.isEmpty()==true){
            JOptionPane.showMessageDialog(null,"No se puede facturar nada");
        }else{
            UISSRecipe rec=new UISSRecipe();
            rec.setVisible(true);
            rec.ShowInfo(user, productsToBuy);
        }
    }//GEN-LAST:event_buyActionPerformed
    
    private void tableToBuyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableToBuyMouseClicked
        ShowTotal(); //Cada vez que se da click en la tabla se actualiza
    }//GEN-LAST:event_tableToBuyMouseClicked
    
    ArrayList user=new ArrayList();
    public ArrayList ShowUser(ArrayList user){//Función para obtener la info del usuario desde el UIStore
        this.user=user;
        return this.user;
    }
    
    public void ShowTable(ArrayList products){
        try {//Para hacer esperar la función
            Thread.sleep(1*500);
        }
         catch (Exception e) {
            System.out.println(e);
        }
        DefaultTableModel model=(DefaultTableModel) tableToBuy.getModel();//Se instancia la tabla
        model.setRowCount(0); //Se borra todas las filas
        for(int i=0;i<products.size()/3;i++){//Para recorrer todo el array
            Object[] row=new Object[6];//Se inicia la fila
            int k=0;//Para recorrer el row
            for(int j=i*3;j<(3*(i+1));j++){//El j ya que inicia en 0 3 5..., y termina en 1 3...
                row[k]= products.get(j);
                k++;
            }
            row[3]=1;
            row[4]=row[2];
            row[5]=true;
            model.addRow(row);
            tableToBuy.setRowHeight(i, 50);//Dar la altura de la imagen a la fila
        }
        ShowTotal();
    }
   
    public void ShowTotal(){
        int total=0;//Se define una variable total que es la suma de todos los productos
        
        for(int i=0;i<tableToBuy.getRowCount();i++){
            if(tableToBuy.getValueAt(i, 5).equals(true)){//Sólo los que están seleccionados hace la suma
                int value=(Integer.valueOf((String) tableToBuy.getValueAt(i, 2))*((int) tableToBuy.getValueAt(i, 3)));
                total=total+value;
                tableToBuy.setValueAt(String.valueOf(value), i,4);
            }            
        }
        totalLabel.setText(String.valueOf(total));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tableToBuy;
    private javax.swing.JLabel totalLabel;
    // End of variables declaration//GEN-END:variables
}
